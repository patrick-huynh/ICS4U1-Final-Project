package gui;

import application.LimitedTextField;
import application.TextDialog;

import utility.Inventory;
import utility.FoodItem;
import utility.FoodGroup;
import utility.Supplier;

import java.text.NumberFormat;
import java.text.DecimalFormat;

import java.io.IOException;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.net.URISyntaxException;
import java.nio.channels.FileChannel;

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.stage.Screen;

import javafx.geometry.Rectangle2D;
import javafx.geometry.Insets;

import javafx.scene.Scene;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.MenuItem;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.TextField;
import javafx.scene.control.Label;

import javafx.scene.control.TableCell;
import javafx.scene.control.TableView;
import javafx.scene.control.TableColumn;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;

import javafx.util.converter.NumberStringConverter;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.EventHandler;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.TableCell;


public class InventoryModule extends Application {
    
    Inventory inventory;
    
    VBox box;
    HBox div, div_child;
    Scene scene;
    Rectangle2D screen;
    
    TableView<FoodItem> cart;
    ObservableList<FoodItem> items, added;
    
    TableView<FoodItem> food_items;
    FilteredList<FoodItem> filtered_items;
    SortedList<FoodItem> sorted_items;
    
    ContextMenu itemsCtx, addedCtx;
    
    @Override
    public void start(Stage stage) {
        //SCENE SETUP
        screen = Screen.getPrimary().getVisualBounds();
        box = new VBox();
        box.setSpacing(5);
        box.setPadding(new Insets(10, 0, 0, 10));
        
        //FOOD ITEMS TABLE SETUP
        inventory = new Inventory(20000);
        food_items = new TableView<>();
        food_items.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        items = FXCollections.observableArrayList();
        
        //FOOD ITEMS TABLE COLUMN
        
        //NAME PROPERTY
        TableColumn<FoodItem, String> name_items = new TableColumn<>();
        name_items.setCellValueFactory(new PropertyValueFactory<>("name"));
        name_items.setCellFactory(TextFieldTableCell.forTableColumn());
        name_items.setOnEditCommit(e -> {
            ((FoodItem) e.getTableView().getItems().get(
			e.getTablePosition().getRow())).setName(e.getNewValue());
        });
        food_items.getColumns().add(name_items);
        
        //EXPIRY DATE PROPERTY
        TableColumn<FoodItem, String> expiry_items = new TableColumn<>();
        expiry_items.setCellValueFactory(new PropertyValueFactory<>("expiryDate"));
        expiry_items.setCellFactory(TextFieldTableCell.forTableColumn());
        expiry_items.setOnEditCommit(e -> {
                ((FoodItem) e.getTableView().getItems().get(
			e.getTablePosition().getRow())).setExpiryDate(e.getNewValue());
        });
        food_items.getColumns().add(expiry_items);
        
        //GROUP PROPERTY
        TableColumn<FoodItem, String> group_items = new TableColumn<>();
        group_items.setCellValueFactory(new PropertyValueFactory<>("group"));
        group_items.setCellFactory(TextFieldTableCell.forTableColumn());
        group_items.setOnEditCommit(e -> {
        ((FoodItem) e.getTableView().getItems().get(
			e.getTablePosition().getRow())).setGroup(e.getNewValue());
        });
        food_items.getColumns().add(group_items);
        
        //QUANTITY PROPERTY
        TableColumn<FoodItem, Number> quantity_items = new TableColumn<>();
        quantity_items.setCellValueFactory(new PropertyValueFactory<>("quantity"));
        quantity_items.setCellFactory(TextFieldTableCell.forTableColumn(new NumberStringConverter()));
        quantity_items.setOnEditCommit(e -> {
            if (e.getNewValue() instanceof Number) {
		((FoodItem) e.getTableView().getItems().get(
                    e.getTablePosition().getRow())).setQuantity(e.getNewValue());
	    }
        });
        food_items.getColumns().add(quantity_items);
        
        //STOCK PROPERTY
        TableColumn<FoodItem, Number> stock_items = new TableColumn<>();
        stock_items.setCellValueFactory(new PropertyValueFactory<>("stock"));
        stock_items.setCellFactory(TextFieldTableCell.forTableColumn(new NumberStringConverter()));
        stock_items.setOnEditCommit(e -> {
            if (e.getNewValue() instanceof Number) {
		((FoodItem) e.getTableView().getItems().get(
			e.getTablePosition().getRow())).setStock(e.getNewValue());
	    }
        });
        food_items.getColumns().add(stock_items);
        
        //SEARCH BAR: FILTERED LIST AND SORTED LIST SETUP
        filtered_items = new FilteredList<>(items, f -> true);
        TextField search_field = new TextField();
        search_field.setPromptText("Search items");
        
        search_field.textProperty().addListener((observable, oldValue, newValue) -> {
            filtered_items.setPredicate(f -> {
                if (newValue == null || newValue.isEmpty()) {
                    return true;
                }
                
                String lowerCaseFilter = newValue.toLowerCase().trim();
                
		if (f.getName().toLowerCase().contains(lowerCaseFilter)) {
                    return true;
                } else if (f.getExpiryDate().toLowerCase().contains(lowerCaseFilter)) {
                    return true;
                } else if (f.getGroup().getGroupName().toLowerCase().contains(lowerCaseFilter)) {
                    return true;
                }
                
		return false;
            });
        });
        
        sorted_items = new SortedList<>(filtered_items);
        sorted_items.comparatorProperty().bind(food_items.comparatorProperty());
        
        //CONTEXTMENU FOR FOOD ITEMS 
        itemsCtx = new ContextMenu();
        MenuItem items_addRow = new MenuItem("Add Row");
        MenuItem items_addEmptyRow = new MenuItem("Add Empty Row");
        MenuItem items_deleteRow = new MenuItem("Delete Row");
        MenuItem items_deleteLastRow = new MenuItem("Delete Last Row");
        
        itemsCtx.getItems().addAll(items_addRow, items_addEmptyRow, items_deleteRow, 
                items_deleteLastRow);
	
	
        //CART SETUP
        cart = new TableView<>();
        cart.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        added = FXCollections.observableArrayList();
        cart.setItems(added);
        
        final NumberFormat nf = new DecimalFormat("##.##");
        
        TableColumn<FoodItem, String> name_cart = new TableColumn<>();
        name_cart.setCellValueFactory(new PropertyValueFactory<>("name"));
        cart.getColumns().add(name_cart);
        
        TableColumn<FoodItem, Number> group_cart = new TableColumn<>();
        group_cart.setCellFactory(tc -> new TableCell<FoodItem, Number>() {
            @Override
            protected void updateItem(Number value, boolean empty) {
                super.updateItem(value, empty);
                if (value == null || empty) {
                    setText("");
		} else {
                    setText(nf.format(value));
		}
            }
        });
        cart.getColumns().add(group_cart);
        
        //Update cart choices
        ChoiceBox<String> cart_choices = new ChoiceBox<>();

        //SCROLLPANE SETUP
        ScrollPane window = new ScrollPane();
        window.setContent(cart);
        
        //BUTTONS FOR COST BOX
        Label costLabel = new Label("0.0");
        Button addToCart = new Button("Add to Cart");
        addToCart.setOnAction(e -> {
            double cost = String.valueOf(costLabel.getText());
            //cost += items.get(
            costLabel.setText(Double.toString(cost)); 
        });
       
        //CONTEXTMENU FOR CART ITEMS
        addedCtx = new ContextMenu();
        MenuItem cart_deleteRow = new MenuItem("Delete Row");
	cart_deleteRow.setOnAction(e -> {
		FoodItem removed = cart.getSelectionModel().getSelectedItem();
		added.removeAll(removed);
		costLabel.setText(Double.toString(String.valueOf(costLabel.getText()) - removed.computeSTD()));
	});
        
        addedCtx.getItems().add(cart_deleteRow);
        
        
        
        stage.setScene(scene);
        stage.show();
    }              
    
    public static void main(String[] args) {
        launch(args);
    }
}
