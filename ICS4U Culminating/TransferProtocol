package utility;

import java.util.logging.Level;
import java.util.logging.Logger;

import java.io.File;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.nio.channels.FileChannel;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.BufferedWriter;
import java.io.FileWriter;

import javafx.collections.ObservableList;
import javafx.scene.control.ChoiceBox;

public final class TransferProtocol {
	
	/**Copies the contents of a source file to a target file.
	 * @param source - The source File object to copy from.
	 * @param target - The target File object to copy to.*/
    public static void copy(File source, File target) {
        try(FileInputStream in = new FileInputStream(source);
            FileOutputStream out = new FileOutputStream(target);
            FileChannel from = in.getChannel();
            FileChannel to = out.getChannel();
                ){
            
            to.transferFrom(from, 0, from.size());
            
        } catch (IOException e) {
            Logger.getLogger(TransferProtocol.class.getName()).log(Level.SEVERE, null, e);
        } catch (Exception e) {
            Logger.getLogger(TransferProtocol.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    /**Swaps the contents of two File objects using TransferProtocol.copy().
     * @param path - The path to a temporary file in the project source folder.*/
    public static void swap(File source, File target, String path) {
    	File temp = new File(path);
    	copy(target, temp);
    	copy(source, target);
    	copy(temp, source);
    }
    
    /**Saves the contents of ObservableList of type Senior to a designated source file.*/
    public static void saveSenior(File source, File target, ObservableList<Senior> list) {
    	
    }
    
    public static void loadSenior(File source, ObservableList<Senior> list) {
    	
    }
    
    public static void saveCaregiver(File source, File target, ObservableList<Caregiver> list) {
    	
    }
    
    public static void loadCaregiver(File source, ObservableList<Caregiver> list) {
    	
    }
    
    public static void loadSupplier(File source, ObservableList<Supplier> list) {
    	try (BufferedReader reader = new BufferedReader(new FileReader(source));
    			) {
    		String line;
    		
    		while((line = reader.readLine()) != null) {
    			Supplier toAdd = new Supplier(line, reader.readLine(), reader.readLine(), 
    					Double.parseDouble(reader.readLine()), Integer.parseInt(reader.readLine()),
    							Double.parseDouble(reader.readLine()));
    			list.add(toAdd);
    		}
    		
    	} catch (IOException e) {
    		Logger.getLogger(TransferProtocol.class.getName()).log(Level.SEVERE, null, e);
    		System.err.println("Error configuring suppliers list to table. Check that suppliers.txt exists.");
    	}
    }
    
    public static void updateChoicesInventory(ChoiceBox<String> box, FoodItem item, boolean add) {
    	if (add) {
    		box.getItems().add(item.getName());
    	} else {
    		box.getItems().remove(item.getName());
    	}
    }
    
    public static void saveInventory(File source, File target, ObservableList<FoodItem> list) {
    	
    }
    
    public static void loadInventory(File source, ObservableList<FoodItem> list, ChoiceBox<String> box) {
    	try (BufferedReader reader = new BufferedReader(new FileReader(source));	
    			) {
    		
    		String line;
    		while((line = reader.readLine()) != null) {
    			FoodItem toAdd = new FoodItem(line, reader.readLine(), new FoodGroup(reader.readLine()), 
    					Integer.parseInt(reader.readLine()), Integer.parseInt(reader.readLine()));
    			list.add(toAdd);
    			updateChoicesInventory(box, toAdd, true);
    		}
    	} catch (IOException e) {
    		Logger.getLogger(TransferProtocol.class.getName()).log(Level.SEVERE, null, e);
    		System.err.println("Error configuring inventory list to table. Check that recent_inventory.txt exists.");
    	}
    }
    
}
